/**
 * lunaform
 * This is a RESTful server for managing Terraform plan and apply jobs and the auditing of actions to approve those apply jobs. The inspiration for this project is the AWS CloudFormation API's. The intention is to implement a locking mechanism not only for the terraform state, but for the plan and apply of terraform modules. Once a `module` plan starts, it is instantiated as a `stack` within the nomencalture of `lunaform`. 
 *
 * OpenAPI spec version: 0.0.1-alpha
 * Contact: drew.sonne@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/HalCurie', 'model/HalHref', 'model/HalRscLinks', 'model/Resource', 'model/ResourceAuthUser', 'model/ResourceList', 'model/ResourceListTfDeployment', 'model/ResourceListTfModule', 'model/ResourceListTfStack', 'model/ResourceListTfStateBackend', 'model/ResourceListTfWorkspace', 'model/ResourceTfDeployment', 'model/ResourceTfModule', 'model/ResourceTfStack', 'model/ResourceTfStateBackend', 'model/ResourceTfWorkspace', 'model/ResourcetfstackEmbedded', 'model/ResponseListResources', 'model/ResponseListTfDeployments', 'model/ResponseListTfModules', 'model/ResponseListTfStacks', 'model/ResponseListTfStateBackends', 'model/ResponseListTfWorkspaces', 'model/ServerError', 'api/ModulesApi', 'api/ResourcesApi', 'api/StacksApi', 'api/StateBackendsApi', 'api/WorkspacesApi'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('./ApiClient'), require('./model/HalCurie'), require('./model/HalHref'), require('./model/HalRscLinks'), require('./model/Resource'), require('./model/ResourceAuthUser'), require('./model/ResourceList'), require('./model/ResourceListTfDeployment'), require('./model/ResourceListTfModule'), require('./model/ResourceListTfStack'), require('./model/ResourceListTfStateBackend'), require('./model/ResourceListTfWorkspace'), require('./model/ResourceTfDeployment'), require('./model/ResourceTfModule'), require('./model/ResourceTfStack'), require('./model/ResourceTfStateBackend'), require('./model/ResourceTfWorkspace'), require('./model/ResourcetfstackEmbedded'), require('./model/ResponseListResources'), require('./model/ResponseListTfDeployments'), require('./model/ResponseListTfModules'), require('./model/ResponseListTfStacks'), require('./model/ResponseListTfStateBackends'), require('./model/ResponseListTfWorkspaces'), require('./model/ServerError'), require('./api/ModulesApi'), require('./api/ResourcesApi'), require('./api/StacksApi'), require('./api/StateBackendsApi'), require('./api/WorkspacesApi'));
  }
}(function(ApiClient, HalCurie, HalHref, HalRscLinks, Resource, ResourceAuthUser, ResourceList, ResourceListTfDeployment, ResourceListTfModule, ResourceListTfStack, ResourceListTfStateBackend, ResourceListTfWorkspace, ResourceTfDeployment, ResourceTfModule, ResourceTfStack, ResourceTfStateBackend, ResourceTfWorkspace, ResourcetfstackEmbedded, ResponseListResources, ResponseListTfDeployments, ResponseListTfModules, ResponseListTfStacks, ResponseListTfStateBackends, ResponseListTfWorkspaces, ServerError, ModulesApi, ResourcesApi, StacksApi, StateBackendsApi, WorkspacesApi) {
  'use strict';

  /**
   * This_is_a_RESTful_server_for_managing_Terraform_plan_and_apply_jobs_and_the_auditing_of_actions_to_approve_those_apply_jobs_The_inspiration_for_this_project_is_the_AWS_CloudFormation_APIs__The_intention_is_to_implement_a_locking_mechanismnot_only_for_the_terraform_state_but_for_the_plan_and_apply_of_terraform_modules__Once_a_module_plan_starts_itis_instantiated_as_a_stack_within_the_nomencalture_of_lunaform_.<br>
   * The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
   * <p>
   * An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
   * <pre>
   * var Lunaform = require('index'); // See note below*.
   * var xxxSvc = new Lunaform.XxxApi(); // Allocate the API class we're going to use.
   * var yyyModel = new Lunaform.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
   * and put the application logic within the callback function.</em>
   * </p>
   * <p>
   * A non-AMD browser application (discouraged) might do something like this:
   * <pre>
   * var xxxSvc = new Lunaform.XxxApi(); // Allocate the API class we're going to use.
   * var yyy = new Lunaform.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * </p>
   * @module index
   * @version 0.0.1-alpha
   */
  var exports = {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient: ApiClient,
    /**
     * The HalCurie model constructor.
     * @property {module:model/HalCurie}
     */
    HalCurie: HalCurie,
    /**
     * The HalHref model constructor.
     * @property {module:model/HalHref}
     */
    HalHref: HalHref,
    /**
     * The HalRscLinks model constructor.
     * @property {module:model/HalRscLinks}
     */
    HalRscLinks: HalRscLinks,
    /**
     * The Resource model constructor.
     * @property {module:model/Resource}
     */
    Resource: Resource,
    /**
     * The ResourceAuthUser model constructor.
     * @property {module:model/ResourceAuthUser}
     */
    ResourceAuthUser: ResourceAuthUser,
    /**
     * The ResourceList model constructor.
     * @property {module:model/ResourceList}
     */
    ResourceList: ResourceList,
    /**
     * The ResourceListTfDeployment model constructor.
     * @property {module:model/ResourceListTfDeployment}
     */
    ResourceListTfDeployment: ResourceListTfDeployment,
    /**
     * The ResourceListTfModule model constructor.
     * @property {module:model/ResourceListTfModule}
     */
    ResourceListTfModule: ResourceListTfModule,
    /**
     * The ResourceListTfStack model constructor.
     * @property {module:model/ResourceListTfStack}
     */
    ResourceListTfStack: ResourceListTfStack,
    /**
     * The ResourceListTfStateBackend model constructor.
     * @property {module:model/ResourceListTfStateBackend}
     */
    ResourceListTfStateBackend: ResourceListTfStateBackend,
    /**
     * The ResourceListTfWorkspace model constructor.
     * @property {module:model/ResourceListTfWorkspace}
     */
    ResourceListTfWorkspace: ResourceListTfWorkspace,
    /**
     * The ResourceTfDeployment model constructor.
     * @property {module:model/ResourceTfDeployment}
     */
    ResourceTfDeployment: ResourceTfDeployment,
    /**
     * The ResourceTfModule model constructor.
     * @property {module:model/ResourceTfModule}
     */
    ResourceTfModule: ResourceTfModule,
    /**
     * The ResourceTfStack model constructor.
     * @property {module:model/ResourceTfStack}
     */
    ResourceTfStack: ResourceTfStack,
    /**
     * The ResourceTfStateBackend model constructor.
     * @property {module:model/ResourceTfStateBackend}
     */
    ResourceTfStateBackend: ResourceTfStateBackend,
    /**
     * The ResourceTfWorkspace model constructor.
     * @property {module:model/ResourceTfWorkspace}
     */
    ResourceTfWorkspace: ResourceTfWorkspace,
    /**
     * The ResourcetfstackEmbedded model constructor.
     * @property {module:model/ResourcetfstackEmbedded}
     */
    ResourcetfstackEmbedded: ResourcetfstackEmbedded,
    /**
     * The ResponseListResources model constructor.
     * @property {module:model/ResponseListResources}
     */
    ResponseListResources: ResponseListResources,
    /**
     * The ResponseListTfDeployments model constructor.
     * @property {module:model/ResponseListTfDeployments}
     */
    ResponseListTfDeployments: ResponseListTfDeployments,
    /**
     * The ResponseListTfModules model constructor.
     * @property {module:model/ResponseListTfModules}
     */
    ResponseListTfModules: ResponseListTfModules,
    /**
     * The ResponseListTfStacks model constructor.
     * @property {module:model/ResponseListTfStacks}
     */
    ResponseListTfStacks: ResponseListTfStacks,
    /**
     * The ResponseListTfStateBackends model constructor.
     * @property {module:model/ResponseListTfStateBackends}
     */
    ResponseListTfStateBackends: ResponseListTfStateBackends,
    /**
     * The ResponseListTfWorkspaces model constructor.
     * @property {module:model/ResponseListTfWorkspaces}
     */
    ResponseListTfWorkspaces: ResponseListTfWorkspaces,
    /**
     * The ServerError model constructor.
     * @property {module:model/ServerError}
     */
    ServerError: ServerError,
    /**
     * The ModulesApi service constructor.
     * @property {module:api/ModulesApi}
     */
    ModulesApi: ModulesApi,
    /**
     * The ResourcesApi service constructor.
     * @property {module:api/ResourcesApi}
     */
    ResourcesApi: ResourcesApi,
    /**
     * The StacksApi service constructor.
     * @property {module:api/StacksApi}
     */
    StacksApi: StacksApi,
    /**
     * The StateBackendsApi service constructor.
     * @property {module:api/StateBackendsApi}
     */
    StateBackendsApi: StateBackendsApi,
    /**
     * The WorkspacesApi service constructor.
     * @property {module:api/WorkspacesApi}
     */
    WorkspacesApi: WorkspacesApi
  };

  return exports;
}));
