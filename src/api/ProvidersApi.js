/**
 * lunaform
 * This is a RESTful server for managing Terraform plan and apply jobs and the auditing of actions to approve those apply jobs. The inspiration for this project is the AWS CloudFormation API's. The intention is to implement a locking mechanism not only for the terraform state, but for the plan and apply of terraform modules. Once a `module` plan starts, it is instantiated as a `stack` within the nomencalture of `lunaform`. 
 *
 * OpenAPI spec version: 0.0.1-alpha
 * Contact: drew.sonne@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ResourceTfProvider', 'model/ResourceTfProviderConfiguration', 'model/ResponseListTfProviderConfiguration', 'model/ResponseListTfProviders', 'model/ServerError'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ResourceTfProvider'), require('../model/ResourceTfProviderConfiguration'), require('../model/ResponseListTfProviderConfiguration'), require('../model/ResponseListTfProviders'), require('../model/ServerError'));
  } else {
    // Browser globals (root is window)
    if (!root.Lunaform) {
      root.Lunaform = {};
    }
    root.Lunaform.ProvidersApi = factory(root.Lunaform.ApiClient, root.Lunaform.ResourceTfProvider, root.Lunaform.ResourceTfProviderConfiguration, root.Lunaform.ResponseListTfProviderConfiguration, root.Lunaform.ResponseListTfProviders, root.Lunaform.ServerError);
  }
}(this, function(ApiClient, ResourceTfProvider, ResourceTfProviderConfiguration, ResponseListTfProviderConfiguration, ResponseListTfProviders, ServerError) {
  'use strict';

  /**
   * Providers service.
   * @module api/ProvidersApi
   * @version 0.0.1-alpha
   */

  /**
   * Constructs a new ProvidersApi. 
   * @alias module:api/ProvidersApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createProvider operation.
     * @callback module:api/ProvidersApi~createProviderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceTfProvider} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload a Terraform provider
     * @param {Object} opts Optional parameters
     * @param {module:model/ResourceTfProvider} opts.terraformProvider A terraform module
     * @param {module:api/ProvidersApi~createProviderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceTfProvider}
     */
    this.createProvider = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['terraformProvider'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = ['application/vnd.lunaform.v1+json'];
      var accepts = ['application/vnd.lunaform.v1+json'];
      var returnType = ResourceTfProvider;

      return this.apiClient.callApi(
        '/tf/providers/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createProviderConfiguration operation.
     * @callback module:api/ProvidersApi~createProviderConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceTfProviderConfiguration} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Terraform Provider Configuration
     * @param {String} providerName Terraform Provider Name
     * @param {module:model/ResourceTfProviderConfiguration} providerConfiguration A terraform provider configuration
     * @param {module:api/ProvidersApi~createProviderConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceTfProviderConfiguration}
     */
    this.createProviderConfiguration = function(providerName, providerConfiguration, callback) {
      var postBody = providerConfiguration;

      // verify the required parameter 'providerName' is set
      if (providerName === undefined || providerName === null) {
        throw new Error("Missing the required parameter 'providerName' when calling createProviderConfiguration");
      }

      // verify the required parameter 'providerConfiguration' is set
      if (providerConfiguration === undefined || providerConfiguration === null) {
        throw new Error("Missing the required parameter 'providerConfiguration' when calling createProviderConfiguration");
      }


      var pathParams = {
        'provider-name': providerName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = ['application/vnd.lunaform.v1+json'];
      var accepts = ['application/vnd.lunaform.v1+json'];
      var returnType = ResourceTfProviderConfiguration;

      return this.apiClient.callApi(
        '/tf/provider/{provider-name}/configurations', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteProvider operation.
     * @callback module:api/ProvidersApi~deleteProviderCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a terraform provider
     * @param {String} name Unique identifier for this provider
     * @param {module:api/ProvidersApi~deleteProviderCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteProvider = function(name, callback) {
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling deleteProvider");
      }


      var pathParams = {
        'name': name
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = ['application/vnd.lunaform.v1+json'];
      var accepts = ['application/vnd.lunaform.v1+json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/tf/provider/{name}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteProviderConfiguration operation.
     * @callback module:api/ProvidersApi~deleteProviderConfigurationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a terraform provider configuration
     * @param {String} providerName Terraform Provider ID
     * @param {String} id Configuration for a Terraform Provider
     * @param {module:api/ProvidersApi~deleteProviderConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteProviderConfiguration = function(providerName, id, callback) {
      var postBody = null;

      // verify the required parameter 'providerName' is set
      if (providerName === undefined || providerName === null) {
        throw new Error("Missing the required parameter 'providerName' when calling deleteProviderConfiguration");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteProviderConfiguration");
      }


      var pathParams = {
        'provider-name': providerName,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = ['application/vnd.lunaform.v1+json'];
      var accepts = ['application/vnd.lunaform.v1+json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/tf/provider/{provider-name}/configuration/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getProvider operation.
     * @callback module:api/ProvidersApi~getProviderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceTfProvider} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Terraform Provider
     * @param {String} name Terraform Provider Name
     * @param {module:api/ProvidersApi~getProviderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceTfProvider}
     */
    this.getProvider = function(name, callback) {
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getProvider");
      }


      var pathParams = {
        'name': name
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = ['application/vnd.lunaform.v1+json'];
      var accepts = ['application/vnd.lunaform.v1+json'];
      var returnType = ResourceTfProvider;

      return this.apiClient.callApi(
        '/tf/provider/{name}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getProviderConfiguration operation.
     * @callback module:api/ProvidersApi~getProviderConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceTfProviderConfiguration} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Configuration for Provider
     * @param {String} providerName Terraform Provider ID
     * @param {String} id Configuration for a Terraform Provider
     * @param {module:api/ProvidersApi~getProviderConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceTfProviderConfiguration}
     */
    this.getProviderConfiguration = function(providerName, id, callback) {
      var postBody = null;

      // verify the required parameter 'providerName' is set
      if (providerName === undefined || providerName === null) {
        throw new Error("Missing the required parameter 'providerName' when calling getProviderConfiguration");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getProviderConfiguration");
      }


      var pathParams = {
        'provider-name': providerName,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = ['application/vnd.lunaform.v1+json'];
      var accepts = ['application/vnd.lunaform.v1+json'];
      var returnType = ResourceTfProviderConfiguration;

      return this.apiClient.callApi(
        '/tf/provider/{provider-name}/configuration/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listProviderConfigurations operation.
     * @callback module:api/ProvidersApi~listProviderConfigurationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponseListTfProviderConfiguration} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Configurations for s Terraform Provider
     * @param {String} providerName Terraform Provider Name
     * @param {module:api/ProvidersApi~listProviderConfigurationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResponseListTfProviderConfiguration}
     */
    this.listProviderConfigurations = function(providerName, callback) {
      var postBody = null;

      // verify the required parameter 'providerName' is set
      if (providerName === undefined || providerName === null) {
        throw new Error("Missing the required parameter 'providerName' when calling listProviderConfigurations");
      }


      var pathParams = {
        'provider-name': providerName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = ['application/vnd.lunaform.v1+json'];
      var accepts = ['application/vnd.lunaform.v1+json'];
      var returnType = ResponseListTfProviderConfiguration;

      return this.apiClient.callApi(
        '/tf/provider/{provider-name}/configurations', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listProviders operation.
     * @callback module:api/ProvidersApi~listProvidersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponseListTfProviders} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Terraform Providers
     * @param {module:api/ProvidersApi~listProvidersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResponseListTfProviders}
     */
    this.listProviders = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = ['application/vnd.lunaform.v1+json'];
      var accepts = ['application/vnd.lunaform.v1+json'];
      var returnType = ResponseListTfProviders;

      return this.apiClient.callApi(
        '/tf/providers/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateProvider operation.
     * @callback module:api/ProvidersApi~updateProviderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceTfProvider} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Terraform provider
     * @param {String} name Terraform Provider ID
     * @param {Object} opts Optional parameters
     * @param {module:model/ResourceTfProvider} opts.terraformProvider A terraform provider
     * @param {module:api/ProvidersApi~updateProviderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceTfProvider}
     */
    this.updateProvider = function(name, opts, callback) {
      opts = opts || {};
      var postBody = opts['terraformProvider'];

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling updateProvider");
      }


      var pathParams = {
        'name': name
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = ['application/vnd.lunaform.v1+json'];
      var accepts = ['application/vnd.lunaform.v1+json'];
      var returnType = ResourceTfProvider;

      return this.apiClient.callApi(
        '/tf/provider/{name}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
