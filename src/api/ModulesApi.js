/**
 * lunaform
 * This is a RESTful server for managing Terraform plan and apply jobs and the auditing of actions to approve those apply jobs. The inspiration for this project is the AWS CloudFormation API's. The intention is to implement a locking mechanism not only for the terraform state, but for the plan and apply of terraform modules. Once a `module` plan starts, it is instantiated as a `stack` within the nomencalture of `lunaform`. 
 *
 * OpenAPI spec version: 0.0.1-alpha
 * Contact: drew.sonne@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ResourceTfModule', 'model/ResponseListTfModules', 'model/ServerError'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ResourceTfModule'), require('../model/ResponseListTfModules'), require('../model/ServerError'));
  } else {
    // Browser globals (root is window)
    if (!root.Lunaform) {
      root.Lunaform = {};
    }
    root.Lunaform.ModulesApi = factory(root.Lunaform.ApiClient, root.Lunaform.ResourceTfModule, root.Lunaform.ResponseListTfModules, root.Lunaform.ServerError);
  }
}(this, function(ApiClient, ResourceTfModule, ResponseListTfModules, ServerError) {
  'use strict';

  /**
   * Modules service.
   * @module api/ModulesApi
   * @version 0.0.1-alpha
   */

  /**
   * Constructs a new ModulesApi. 
   * @alias module:api/ModulesApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createModule operation.
     * @callback module:api/ModulesApi~createModuleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceTfModule} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload a Terraform module
     * @param {Object} opts Optional parameters
     * @param {module:model/ResourceTfModule} opts.terraformModule A terraform module
     * @param {module:api/ModulesApi~createModuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceTfModule}
     */
    this.createModule = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['terraformModule'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = ['application/vnd.lunaform.v1+json'];
      var accepts = ['application/vnd.lunaform.v1+json'];
      var returnType = ResourceTfModule;

      return this.apiClient.callApi(
        '/tf/modules', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteModule operation.
     * @callback module:api/ModulesApi~deleteModuleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a terraform module
     * @param {String} id Unique identifier for this module
     * @param {module:api/ModulesApi~deleteModuleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteModule = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteModule");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = ['application/vnd.lunaform.v1+json'];
      var accepts = ['application/vnd.lunaform.v1+json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/tf/module/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getModule operation.
     * @callback module:api/ModulesApi~getModuleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceTfModule} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Terraform module
     * @param {String} id Unique identifier for this module
     * @param {module:api/ModulesApi~getModuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceTfModule}
     */
    this.getModule = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getModule");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = ['application/vnd.lunaform.v1+json'];
      var accepts = ['application/vnd.lunaform.v1+json'];
      var returnType = ResourceTfModule;

      return this.apiClient.callApi(
        '/tf/module/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listModules operation.
     * @callback module:api/ModulesApi~listModulesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponseListTfModules} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List TF modules
     * @param {module:api/ModulesApi~listModulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResponseListTfModules}
     */
    this.listModules = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = ['application/vnd.lunaform.v1+json'];
      var accepts = ['application/vnd.lunaform.v1+json'];
      var returnType = ResponseListTfModules;

      return this.apiClient.callApi(
        '/tf/modules', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
