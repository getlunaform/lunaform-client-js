/**
 * lunaform
 * This is a RESTful server for managing Terraform plan and apply jobs and the auditing of actions to approve those apply jobs. The inspiration for this project is the AWS CloudFormation API's. The intention is to implement a locking mechanism not only for the terraform state, but for the plan and apply of terraform modules. Once a `module` plan starts, it is instantiated as a `stack` within the nomencalture of `lunaform`. 
 *
 * OpenAPI spec version: 0.0.1-alpha
 * Contact: drew.sonne@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ResourceTfWorkspace', 'model/ResponseListTfWorkspaces', 'model/ServerError'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ResourceTfWorkspace'), require('../model/ResponseListTfWorkspaces'), require('../model/ServerError'));
  } else {
    // Browser globals (root is window)
    if (!root.Lunaform) {
      root.Lunaform = {};
    }
    root.Lunaform.WorkspacesApi = factory(root.Lunaform.ApiClient, root.Lunaform.ResourceTfWorkspace, root.Lunaform.ResponseListTfWorkspaces, root.Lunaform.ServerError);
  }
}(this, function(ApiClient, ResourceTfWorkspace, ResponseListTfWorkspaces, ServerError) {
  'use strict';

  /**
   * Workspaces service.
   * @module api/WorkspacesApi
   * @version 0.0.1-alpha
   */

  /**
   * Constructs a new WorkspacesApi. 
   * @alias module:api/WorkspacesApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createWorkspace operation.
     * @callback module:api/WorkspacesApi~createWorkspaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceTfWorkspace} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Terraform workspace
     * @param {String} name A terraform workspace
     * @param {Object} opts Optional parameters
     * @param {module:model/ResourceTfWorkspace} opts.terraformWorkspace A terraform workspace
     * @param {module:api/WorkspacesApi~createWorkspaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceTfWorkspace}
     */
    this.createWorkspace = function(name, opts, callback) {
      opts = opts || {};
      var postBody = opts['terraformWorkspace'];

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling createWorkspace");
      }


      var pathParams = {
        'name': name
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = ['application/vnd.lunaform.v1+json'];
      var accepts = ['application/vnd.lunaform.v1+json'];
      var returnType = ResourceTfWorkspace;

      return this.apiClient.callApi(
        '/tf/workspace/{name}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the describeWorkspace operation.
     * @callback module:api/WorkspacesApi~describeWorkspaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceTfWorkspace} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describe a terraform workspace
     * @param {String} name A terraform workspace
     * @param {module:api/WorkspacesApi~describeWorkspaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceTfWorkspace}
     */
    this.describeWorkspace = function(name, callback) {
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling describeWorkspace");
      }


      var pathParams = {
        'name': name
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = ['application/vnd.lunaform.v1+json'];
      var accepts = ['application/vnd.lunaform.v1+json'];
      var returnType = ResourceTfWorkspace;

      return this.apiClient.callApi(
        '/tf/workspace/{name}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listWorkspaces operation.
     * @callback module:api/WorkspacesApi~listWorkspacesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponseListTfWorkspaces} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List approved terraform workspaces
     * @param {module:api/WorkspacesApi~listWorkspacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResponseListTfWorkspaces}
     */
    this.listWorkspaces = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = ['application/vnd.lunaform.v1+json'];
      var accepts = ['application/vnd.lunaform.v1+json'];
      var returnType = ResponseListTfWorkspaces;

      return this.apiClient.callApi(
        '/tf/workspaces', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
