/**
 * lunaform
 * This is a RESTful server for managing Terraform plan and apply jobs and the auditing of actions to approve those apply jobs. The inspiration for this project is the AWS CloudFormation API's. The intention is to implement a locking mechanism not only for the terraform state, but for the plan and apply of terraform modules. Once a `module` plan starts, it is instantiated as a `stack` within the nomencalture of `lunaform`. 
 *
 * OpenAPI spec version: 0.0.1-alpha
 * Contact: drew.sonne@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ResourceTfStateBackend', 'model/ResponseListTfStateBackends', 'model/ServerError'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ResourceTfStateBackend'), require('../model/ResponseListTfStateBackends'), require('../model/ServerError'));
  } else {
    // Browser globals (root is window)
    if (!root.Lunaform) {
      root.Lunaform = {};
    }
    root.Lunaform.StateBackendsApi = factory(root.Lunaform.ApiClient, root.Lunaform.ResourceTfStateBackend, root.Lunaform.ResponseListTfStateBackends, root.Lunaform.ServerError);
  }
}(this, function(ApiClient, ResourceTfStateBackend, ResponseListTfStateBackends, ServerError) {
  'use strict';

  /**
   * StateBackends service.
   * @module api/StateBackendsApi
   * @version 0.0.1-alpha
   */

  /**
   * Constructs a new StateBackendsApi. 
   * @alias module:api/StateBackendsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createStateBackend operation.
     * @callback module:api/StateBackendsApi~createStateBackendCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceTfStateBackend} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Define a Terraform state backend
     * @param {Object} opts Optional parameters
     * @param {module:model/ResourceTfStateBackend} opts.terraformStateBackend A terraform state backend
     * @param {module:api/StateBackendsApi~createStateBackendCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceTfStateBackend}
     */
    this.createStateBackend = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['terraformStateBackend'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = ['application/vnd.lunaform.v1+json'];
      var accepts = ['application/vnd.lunaform.v1+json'];
      var returnType = ResourceTfStateBackend;

      return this.apiClient.callApi(
        '/tf/state-backends', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listStateBackends operation.
     * @callback module:api/StateBackendsApi~listStateBackendsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponseListTfStateBackends} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List TF State Backends
     * @param {module:api/StateBackendsApi~listStateBackendsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResponseListTfStateBackends}
     */
    this.listStateBackends = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = ['application/vnd.lunaform.v1+json'];
      var accepts = ['application/vnd.lunaform.v1+json'];
      var returnType = ResponseListTfStateBackends;

      return this.apiClient.callApi(
        '/tf/state-backends', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateStateBackend operation.
     * @callback module:api/StateBackendsApi~updateStateBackendCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceTfStateBackend} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Define a Terraform state backend
     * @param {String} id ID of a terraform state backend
     * @param {Object} opts Optional parameters
     * @param {module:model/ResourceTfStateBackend} opts.terraformStateBackend A terraform state backend
     * @param {module:api/StateBackendsApi~updateStateBackendCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceTfStateBackend}
     */
    this.updateStateBackend = function(id, opts, callback) {
      opts = opts || {};
      var postBody = opts['terraformStateBackend'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateStateBackend");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = ['application/vnd.lunaform.v1+json'];
      var accepts = ['application/vnd.lunaform.v1+json'];
      var returnType = ResourceTfStateBackend;

      return this.apiClient.callApi(
        '/tf/state-backend/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
