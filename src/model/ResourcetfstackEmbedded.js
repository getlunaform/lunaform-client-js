/**
 * lunaform
 * This is a RESTful server for managing Terraform plan and apply jobs and the auditing of actions to approve those apply jobs. The inspiration for this project is the AWS CloudFormation API's. The intention is to implement a locking mechanism not only for the terraform state, but for the plan and apply of terraform modules. Once a `module` plan starts, it is instantiated as a `stack` within the nomencalture of `lunaform`. 
 *
 * OpenAPI spec version: 0.0.1-alpha
 * Contact: drew.sonne@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ResourceTfDeployment', 'model/ResourceTfModule', 'model/ResourceTfProviderConfiguration', 'model/ResourceTfWorkspace'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./ResourceTfDeployment'), require('./ResourceTfModule'), require('./ResourceTfProviderConfiguration'), require('./ResourceTfWorkspace'));
  } else {
    // Browser globals (root is window)
    if (!root.Lunaform) {
      root.Lunaform = {};
    }
    root.Lunaform.ResourcetfstackEmbedded = factory(root.Lunaform.ApiClient, root.Lunaform.ResourceTfDeployment, root.Lunaform.ResourceTfModule, root.Lunaform.ResourceTfProviderConfiguration, root.Lunaform.ResourceTfWorkspace);
  }
}(this, function(ApiClient, ResourceTfDeployment, ResourceTfModule, ResourceTfProviderConfiguration, ResourceTfWorkspace) {
  'use strict';




  /**
   * The ResourcetfstackEmbedded model module.
   * @module model/ResourcetfstackEmbedded
   * @version 0.0.1-alpha
   */

  /**
   * Constructs a new <code>ResourcetfstackEmbedded</code>.
   * @alias module:model/ResourcetfstackEmbedded
   * @class
   */
  var exports = function() {
    var _this = this;





  };

  /**
   * Constructs a <code>ResourcetfstackEmbedded</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/ResourcetfstackEmbedded} obj Optional instance to populate.
   * @return {module:model/ResourcetfstackEmbedded} The populated <code>ResourcetfstackEmbedded</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('deployments')) {
        obj['deployments'] = ApiClient.convertToType(data['deployments'], [ResourceTfDeployment]);
      }
      if (data.hasOwnProperty('provider-configurations')) {
        obj['provider-configurations'] = ApiClient.convertToType(data['provider-configurations'], [ResourceTfProviderConfiguration]);
      }
      if (data.hasOwnProperty('workspace')) {
        obj['workspace'] = ResourceTfWorkspace.constructFromObject(data['workspace']);
      }
      if (data.hasOwnProperty('module')) {
        obj['module'] = ResourceTfModule.constructFromObject(data['module']);
      }
    }
    return obj;
  }

  /**
   * @member {Array.<module:model/ResourceTfDeployment>} deployments
   */
  exports.prototype['deployments'] = undefined;
  /**
   * @member {Array.<module:model/ResourceTfProviderConfiguration>} provider-configurations
   */
  exports.prototype['provider-configurations'] = undefined;
  /**
   * @member {module:model/ResourceTfWorkspace} workspace
   */
  exports.prototype['workspace'] = undefined;
  /**
   * @member {module:model/ResourceTfModule} module
   */
  exports.prototype['module'] = undefined;



  return exports;
}));


